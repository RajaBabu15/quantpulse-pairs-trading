[build-system]
requires = [
    "setuptools>=68.0",
    "wheel>=0.40.0",
    "pybind11>=2.10.0",
    "cmake>=3.18.0",
    "ninja>=1.10.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "quantpulse-pairs-trading"
version = "2.1.0"
description = "High-performance pairs trading system with C++ acceleration for quantitative finance"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "algorithmic-trading",
    "pairs-trading",
    "quantitative-finance", 
    "backtesting",
    "financial-modeling",
    "c++",
    "performance",
    "simd",
    "trading-strategies",
    "market-data",
]
classifiers = [
    # Development Status
    "Development Status :: 4 - Beta",
    
    # Intended Audience
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    
    # License
    "License :: OSI Approved :: MIT License",
    
    # Programming Language
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: C++",
    
    # Topic
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    
    # Operating System
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X", 
    "Operating System :: Microsoft :: Windows",
    
    # Environment
    "Environment :: Console",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.20.0,<2.0",
    "pandas>=1.3.0,<3.0", 
    "scipy>=1.7.0,<2.0",
    "matplotlib>=3.4.0,<4.0",
    "seaborn>=0.11.0,<1.0",
    "plotly>=5.0.0,<6.0",
    "yfinance>=0.2.0,<1.0",
    "scikit-learn>=1.0.0,<2.0",
    "joblib>=1.0.0,<2.0",
    "tqdm>=4.60.0,<5.0",
    "pydantic>=2.0.0,<3.0",
    "typer>=0.9.0,<1.0",
    "rich>=13.0.0,<14.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0,<8.0",
    "pytest-cov>=4.0.0,<5.0",
    "pytest-xdist>=3.0.0,<4.0",
    "pytest-benchmark>=4.0.0,<5.0",
    "hypothesis>=6.0.0,<7.0",
    
    # Code Quality
    "black>=23.0.0,<24.0",
    "isort>=5.10.0,<6.0",
    "flake8>=6.0.0,<7.0",
    "mypy>=1.0.0,<2.0",
    "pylint>=2.15.0,<3.0",
    "pre-commit>=3.0.0,<4.0",
    
    # Security
    "bandit[toml]>=1.7.0,<2.0",
    "safety>=3.0.0,<4.0",
    
    # Documentation
    "sphinx>=7.0.0,<8.0",
    "sphinx-rtd-theme>=1.3.0,<2.0",
    "myst-parser>=2.0.0,<3.0",
    "sphinx-autodoc-typehints>=1.20.0,<2.0",
    
    # Performance
    "line-profiler>=4.0.0,<5.0",
    "memory-profiler>=0.60.0,<1.0",
    "py-spy>=0.3.0,<1.0",
    
    # Build Tools
    "build>=0.10.0,<1.0",
    "twine>=4.0.0,<5.0",
    "cmake>=3.18.0,<4.0",
]
docs = [
    "sphinx>=7.0.0,<8.0",
    "sphinx-rtd-theme>=1.3.0,<2.0", 
    "myst-parser>=2.0.0,<3.0",
    "sphinx-autodoc-typehints>=1.20.0,<2.0",
    "nbsphinx>=0.9.0,<1.0",
    "jupyter>=1.0.0,<2.0",
]
test = [
    "pytest>=7.0.0,<8.0",
    "pytest-cov>=4.0.0,<5.0",
    "pytest-xdist>=3.0.0,<4.0",
    "pytest-benchmark>=4.0.0,<5.0",
    "hypothesis>=6.0.0,<7.0",
]

[project.urls]
Homepage = "https://github.com/YOUR_USERNAME/quantpulse-pairs-trading"
Documentation = "https://github.com/YOUR_USERNAME/quantpulse-pairs-trading#readme"
Repository = "https://github.com/YOUR_USERNAME/quantpulse-pairs-trading.git"
"Bug Tracker" = "https://github.com/YOUR_USERNAME/quantpulse-pairs-trading/issues"
Changelog = "https://github.com/YOUR_USERNAME/quantpulse-pairs-trading/blob/main/CHANGELOG.md"
Discussions = "https://github.com/YOUR_USERNAME/quantpulse-pairs-trading/discussions"

[project.scripts]
quantpulse = "quantpulse.cli:main"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["quantpulse*"]
exclude = ["tests*", "docs*", "examples*", "benchmarks*"]

[tool.setuptools.package-data]
"*" = ["*.pyi", "*.typed"]
"quantpulse" = ["*.so", "*.pyd", "*.dll"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | csrc
)/
'''

# isort Configuration  
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["quantpulse"]
known_third_party = [
    "numpy", "pandas", "scipy", "matplotlib", "seaborn", 
    "plotly", "sklearn", "joblib", "tqdm", "pydantic",
    "typer", "rich", "pytest", "hypothesis"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true  
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "plotly.*",
    "seaborn.*",
    "joblib.*",
    "tqdm.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=quantpulse",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:matplotlib.*",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access",
]

# Coverage Configuration  
[tool.coverage.run]
source = ["quantpulse"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/__pycache__/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

# Pylint Configuration
[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring  
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "E1101",  # No member (false positives with C++ extensions)
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 50

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", ".tox"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Build Configuration
[tool.cibuildwheel]
build = "cp39-* cp310-* cp311-* cp312-*"
skip = "*-win32 *-manylinux_i686 *-musllinux*"
build-verbosity = 1

[tool.cibuildwheel.linux]
before-all = "yum install -y cmake gcc-c++ || apt-get update && apt-get install -y cmake g++"
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
before-all = "brew install cmake libomp || true"
repair-wheel-command = "delocate-listdeps {wheel} && delocate-wheel -w {dest_dir} {wheel}"
environment = { CC="clang", CXX="clang++" }

[tool.cibuildwheel.windows]
before-build = "pip install cmake ninja"
repair-wheel-command = "python -m pip install delvewheel && delvewheel repair -w {dest_dir} {wheel}"
